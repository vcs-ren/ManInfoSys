<?php
// --- api/sections/create.php --- (POST /api/sections)

// Headers
header("Access-Control-Allow-Origin: *"); // Adjust for production
header("Content-Type: application/json; charset=UTF-8");
header("Access-Control-Allow-Methods: POST, OPTIONS");
header("Access-Control-Max-Age: 3600");
header("Access-Control-Allow-Headers: Content-Type, Access-Control-Allow-Headers, Authorization, X-Requested-With");

// Handle preflight requests
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit();
}

// Includes
include_once '../config/database.php';
// No specific model needed for simple insert, but one could be created.

// Get posted data
$data = json_decode(file_get_contents("php://input"));

// Validate required fields
if (
    empty($data->programId) ||
    empty($data->yearLevel) ||
    empty($data->sectionCode) // Assuming sectionCode is provided or generated by frontend/backend logic
) {
    http_response_code(400);
    echo json_encode(array("message" => "Unable to create section. Required fields: programId, yearLevel, sectionCode."));
    exit();
}

try {
    // Instantiate DB
    $database = new Database();
    $db = $database->getConnection();

    // Sanitize inputs
    $programId = htmlspecialchars(strip_tags($data->programId));
    $yearLevel = htmlspecialchars(strip_tags($data->yearLevel));
    $sectionCode = htmlspecialchars(strip_tags($data->sectionCode)); // This will be the primary key for `sections` table.
    $adviserId = isset($data->adviserId) && is_numeric($data->adviserId) ? (int)$data->adviserId : null;

    // Check if section code already exists (it's the ID)
    $checkQuery = "SELECT id FROM sections WHERE id = :id";
    $checkStmt = $db->prepare($checkQuery);
    $checkStmt->bindParam(':id', $sectionCode);
    $checkStmt->execute();
    if ($checkStmt->rowCount() > 0) {
        http_response_code(409); // Conflict
        echo json_encode(array("message" => "Section with code {$sectionCode} already exists."));
        exit();
    }

    // Check if programId exists
    $progCheckQuery = "SELECT id FROM programs WHERE id = :programId";
    $progCheckStmt = $db->prepare($progCheckQuery);
    $progCheckStmt->bindParam(':programId', $programId);
    $progCheckStmt->execute();
    if ($progCheckStmt->rowCount() == 0) {
        http_response_code(400);
        echo json_encode(array("message" => "Program with ID {$programId} not found."));
        exit();
    }


    // Insert query (using sectionCode as the primary key 'id')
    $query = "INSERT INTO sections
                SET
                    id = :id, -- sectionCode is the ID
                    section_code = :section_code_display, -- store it also in section_code for display if needed
                    program_id = :programId,
                    year_level = :yearLevel,
                    adviser_id = :adviserId";

    // Prepare statement
    $stmt = $db->prepare($query);

    // Bind data
    $stmt->bindParam(':id', $sectionCode);
    $stmt->bindParam(':section_code_display', $sectionCode);
    $stmt->bindParam(':programId', $programId);
    $stmt->bindParam(':yearLevel', $yearLevel);
    $stmt->bindParam(':adviserId', $adviserId, $adviserId === null ? PDO::PARAM_NULL : PDO::PARAM_INT);

    // Execute query
    if ($stmt->execute()) {
        // Fetch the newly created section to return it with adviser name if present
        $fetchQuery = "SELECT
                         s.id, s.section_code AS sectionCode, s.program_id as programId, s.year_level AS yearLevel,
                         s.adviser_id AS adviserId,
                         CONCAT(t.first_name, ' ', t.last_name) AS adviserName
                       FROM sections s
                       LEFT JOIN teachers t ON s.adviser_id = t.id
                       WHERE s.id = :id";
        $fetchStmt = $db->prepare($fetchQuery);
        $fetchStmt->bindParam(':id', $sectionCode);
        $fetchStmt->execute();
        $newSection = $fetchStmt->fetch(PDO::FETCH_ASSOC);

        if ($newSection) {
            // Ensure adviserId is integer or null
            $newSection['adviserId'] = $newSection['adviserId'] ? (int)$newSection['adviserId'] : null;
            http_response_code(201); // Created
            echo json_encode($newSection);
        } else {
            error_log("Section created (ID: {$sectionCode}) but failed to fetch details.");
            http_response_code(500);
            echo json_encode(array("message" => "Section created but failed to fetch details."));
        }

    } else {
        // Log detailed error
        error_log("Failed to create section: " . implode(" | ", $stmt->errorInfo()));
        http_response_code(503);
        echo json_encode(array("message" => "Unable to create section due to database error."));
    }
} catch (PDOException $e) {
    http_response_code(503);
    error_log("PDOException creating section: " . $e->getMessage());
    echo json_encode(array("message" => "Database error occurred: " . $e->getMessage()));
} catch (Exception $e) {
    error_log("Exception creating section: " . $e->getMessage());
    http_response_code(500);
    echo json_encode(array("message" => "An unexpected error occurred: " . $e->getMessage()));
}
?>