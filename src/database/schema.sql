
-- src/database/schema.sql

-- Use the campus_connect_db database
USE campus_connect_db;

-- Table structure for students
CREATE TABLE IF NOT EXISTS `students` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `student_id` VARCHAR(15) UNIQUE NOT NULL, -- e.g., s1001
  `first_name` VARCHAR(100) NOT NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `course` VARCHAR(100) NOT NULL,
  `status` ENUM('New', 'Transferee', 'Continuing', 'Returnee') NOT NULL,
  `year` VARCHAR(20), -- e.g., '1st Year', '2nd Year' (can be null initially)
  `section` VARCHAR(20), -- e.g., '10A', '20B' (can be null initially)
  `email` VARCHAR(255) UNIQUE,
  `phone` VARCHAR(20),
  `password_hash` VARCHAR(255) NOT NULL, -- Store hashed passwords
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `emergency_contact_name` VARCHAR(255) NULL,
  `emergency_contact_relationship` VARCHAR(100) NULL,
  `emergency_contact_phone` VARCHAR(20) NULL,
  `emergency_contact_address` TEXT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Table structure for teachers
CREATE TABLE IF NOT EXISTS `teachers` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `teacher_id` VARCHAR(15) UNIQUE NOT NULL, -- e.g., t1001
  `first_name` VARCHAR(100) NOT NULL,
  `middle_name` VARCHAR(100) NULL,
  `last_name` VARCHAR(100) NOT NULL,
  `suffix` VARCHAR(10) NULL,
  `department` VARCHAR(100) NOT NULL,
  `email` VARCHAR(255) UNIQUE,
  `phone` VARCHAR(20) NULL,
  `birthday` DATE NULL,
  `address` TEXT NULL, -- Added teacher's address
  `password_hash` VARCHAR(255) NOT NULL, -- Store hashed passwords
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `emergency_contact_name` VARCHAR(255) NULL,
  `emergency_contact_relationship` VARCHAR(100) NULL,
  `emergency_contact_phone` VARCHAR(20) NULL,
  `emergency_contact_address` TEXT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- Table structure for admins
CREATE TABLE IF NOT EXISTS `admins` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `username` VARCHAR(50) UNIQUE NOT NULL,
  `password_hash` VARCHAR(255) NOT NULL,
  `first_name` VARCHAR(100) NULL,
  `last_name` VARCHAR(100) NULL,
  `email` VARCHAR(255) UNIQUE NULL,
  `is_super_admin` BOOLEAN DEFAULT FALSE, -- Added for differentiation
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- Table structure for subjects
CREATE TABLE IF NOT EXISTS `subjects` (
  `id` VARCHAR(20) PRIMARY KEY, -- e.g., CS101, ENGL1
  `name` VARCHAR(255) NOT NULL,
  `description` TEXT
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Table structure for sections
CREATE TABLE IF NOT EXISTS `sections` (
  `id` VARCHAR(20) PRIMARY KEY, -- e.g., CS-10A, BSBA-20B
  `section_code` VARCHAR(10) NOT NULL, -- e.g., 10A, 20B
  `course` VARCHAR(100) NOT NULL,
  `year_level` VARCHAR(20) NOT NULL, -- e.g., '1st Year'
  `adviser_id` INT NULL, -- Foreign key to teachers table
  FOREIGN KEY (`adviser_id`) REFERENCES `teachers`(`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- Table structure for section-subject assignments (Junction Table)
CREATE TABLE IF NOT EXISTS `section_subject_assignments` (
  `id` VARCHAR(50) PRIMARY KEY, -- Composite key like 'SectionID-SubjectID' generated by PHP
  `section_id` VARCHAR(20) NOT NULL,
  `subject_id` VARCHAR(20) NOT NULL,
  `teacher_id` INT NOT NULL,
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`section_id`) REFERENCES `sections`(`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`subject_id`) REFERENCES `subjects`(`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`teacher_id`) REFERENCES `teachers`(`id`) ON DELETE CASCADE ON UPDATE CASCADE -- Or restrict if needed
  -- UNIQUE KEY `unique_assignment` (`section_id`, `subject_id`) -- Prevent assigning the same subject twice to one section
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;

-- Table structure for grades
CREATE TABLE IF NOT EXISTS `grades` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `student_id` INT NOT NULL,
  `subject_id` VARCHAR(20) NOT NULL,
  `term` ENUM('Prelim', 'Midterm', 'Final') NOT NULL,
  `grade` DECIMAL(5, 2) NULL, -- Allows grades like 95.50, use NULL if not submitted
  `remarks` TEXT NULL, -- Optional remarks from the teacher
  `submitted_by_teacher_id` INT NULL, -- Track which teacher submitted/updated
  `assignment_id` VARCHAR(50) NULL, -- Link back to the specific assignment (optional but helpful)
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  `updated_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  FOREIGN KEY (`student_id`) REFERENCES `students`(`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`subject_id`) REFERENCES `subjects`(`id`) ON DELETE CASCADE ON UPDATE CASCADE,
  FOREIGN KEY (`submitted_by_teacher_id`) REFERENCES `teachers`(`id`) ON DELETE SET NULL ON UPDATE CASCADE,
  FOREIGN KEY (`assignment_id`) REFERENCES `section_subject_assignments`(`id`) ON DELETE SET NULL ON UPDATE CASCADE, -- Link to assignment
  UNIQUE KEY `unique_grade_entry` (`student_id`, `subject_id`, `term`) -- Prevent duplicate term grades for same student/subject
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- Table structure for announcements
CREATE TABLE IF NOT EXISTS `announcements` (
  `id` INT AUTO_INCREMENT PRIMARY KEY,
  `title` VARCHAR(255) NOT NULL,
  `content` TEXT NOT NULL,
  `author_id` INT NULL, -- FK to teachers (if author_type is Teacher) or NULL if Admin
  `author_type` ENUM('Admin', 'Teacher') NOT NULL,
  `target_course` VARCHAR(100) NULL, -- NULL or 'all' means all courses
  `target_year_level` VARCHAR(20) NULL, -- NULL or 'all' means all year levels
  `target_section` VARCHAR(20) NULL, -- NULL or 'all' means all sections (FK to sections.id)
  `created_at` TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (`author_id`) REFERENCES `teachers`(`id`) ON DELETE SET NULL ON UPDATE CASCADE -- Only applies if author_type is Teacher
  -- FOREIGN KEY (`target_section`) REFERENCES `sections`(`id`) ON DELETE SET NULL ON UPDATE CASCADE -- Optional: Link target section to sections table
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;


-- Add sample sections (if not already done)
INSERT IGNORE INTO `sections` (`id`, `section_code`, `course`, `year_level`, `adviser_id`) VALUES
('CS-1A', '1A', 'Computer Science', '1st Year', NULL),
('CS-2A', '2A', 'Computer Science', '2nd Year', NULL),
('IT-1B', '1B', 'Information Technology', '1st Year', NULL);


-- Add sample subjects (if not already done)
INSERT IGNORE INTO `subjects` (`id`, `name`, `description`) VALUES
('CS101', 'Introduction to Programming', 'Basics of programming using Python.'),
('IT202', 'Networking Fundamentals', 'Understanding computer networks, TCP/IP.'),
('GEN001', 'Purposive Communication', 'Effective communication skills for academic and professional settings.'),
('MATH101', 'Calculus I', 'Differential and integral calculus.');

-- Consider adding indexes for performance on frequently queried columns
-- ALTER TABLE `students` ADD INDEX `idx_student_section` (`section`);
-- ALTER TABLE `grades` ADD INDEX `idx_grade_student_subject` (`student_id`, `subject_id`);
-- ALTER TABLE `section_subject_assignments` ADD INDEX `idx_assignment_teacher` (`teacher_id`);

